h1. localhost (development)

This procedure will run CapoRSS in development mode using an SQLite database

# Install Ruby 2.1.0
# Install the "bundler" Ruby gem using this command:
<code>
gem install bundler
</code>
# Clone CapoRSS :
<code>
git clone https://github.com/fcapovilla/caporss.git
</code>
# Run a "bundle install" in the application's root directory. Note that some dependencies are native extensions and will need a compiler and development packages:
<code>
bundle install --without production test travis
</code>
# Start CapoRSS using this command:
<code>
bundle exec ruby app.rb
</code>
# Open a web browser and go to "http://localhost:4567"
# The default username/password is "admin"/"admin"

h1. localhost (production)

CapoRSS can be run in production mode with Thin and PostgreSQL. Other database backends can be used by replacing the "dm-postgres-adapter" gem in the Gemfile with the correct Datamapper adapter for your database.

# Install Ruby 2.1.0
# Install the "bundler" Ruby gem using this command:
<code>
gem install bundler
</code>
# Clone CapoRSS :
<code>
git clone https://github.com/fcapovilla/caporss.git
</code>
# Run "bundle install" in the application's root directory. Note that some dependencies are native extensions and will need a compiler and development packages:
<code>
bundle install --without development test travis
</code>
# Set the "DATABASE_URL" environment variable with your database connection informations. ex:
<code>
export DATABASE_URL="postgres://username:password@hostname/database"
</code>
# Run CapoRSS using Thin (Replace YOUR_KEYFILE and YOUR_CERTFILE with the paths of your SSL certificate files:
<code>
bundle exec thin -R config.ru -e production -d --threaded --ssl --ssl-key-file YOUR_KEYFILE --ssl-cert-file YOUR_CERTFILE start
</code>
# Open a web browser and go to "http://localhost:3000"
# The default username/password is "admin"/"admin"

Notes:
* For security reasons, a SSL certificate is required for running CapoRSS in production mode.

h1. Heroku

# Install the "Heroku Toolbelt":https://toolbelt.heroku.com/
# Clone CapoRSS :
<code>
git clone https://github.com/fcapovilla/caporss.git
</code>
# From the cloned folder, create a new application (Replace APPNAME with you application name) :
<code>
cd caporss
</code>
<code>
heroku apps:create APPNAME
</code>
# Add the postgres addon :
<code>
heroku addons:add heroku-postgresql:dev
</code>
# Set the BUNDLE_WITHOUT environment variable so only the production gems are installed:
<code>
heroku config:set BUNDLE_WITHOUT="development:test:travis"
</code>
# Push CapoRSS to heroku :
<code>
git push heroku master
</code>

See this page for more informations :
* "Getting started with Ruby on Heroku":https://devcenter.heroku.com/articles/ruby

h1. Appfog

CapoRSS can easily be used on Appfog :
# Install af :
<code>
gem install af
</code>
# Clone CapoRSS :
<code>
git clone https://github.com/fcapovilla/caporss.git
</code>
# From the cloned folder, create a new Ruby app with a Postgres service (Replace APPNAME with you application name) :
<code>
cd caporss
</code>
<code>
af push APPNAME --runtime ruby193
</code>

See this page for more informations :
* "AppFog CLI Tool Overview":https://docs.appfog.com/getting-started/af-cli

h1. Openshift

Important : This installation method was only tested once and might not work on the current version of CapoRSS.

CapoRSS can be deployed on Openshift using the diy-0.1 and mysql-5.5 cartridges. The cron cartridge is also required if you want automatic feed updates.
<code>
rhc create-app caporss diy-0.1 mysql-5.5 cron-1.4 --from-code=https://github.com/fcapovilla/caporss.git --timeout=9999
</code>

If the first installation method fails, you can try to deploy it in multiple steps :

bc. rhc create-app caporss diy-0.1 mysql-5.5 cron-1.4
cd caporss
git rm -rf diy misc .openshift
git remote add upstream -m master https://github.com/fcapovilla/caporss.git
git pull -s recursive -X theirs upstream master
git push

Please note that the deployment can take a long time because Ruby and some gems need to be compiled on the server during the first deployment.

h1. Sync feeds periodically

The "fetch_all" route will fetch all new items for all feeds on the server. This route can be called by the "sync" user.
A worker script that calls the "/fetch_all" route is included in the "scripts" folder.  You can add this script in a Web Worker, or call it via CRON.

You must set two variables in this script :
* *password* : The "sync" user's password
* *url* : The base url of your CapoRSS instance.

If your server isn't using HTTPS, you will also need to delete the "http.use_ssl" and "http.verify_mode" lines, but please note that doing so will be insecure, because the "sync" user's password will be sent in clear.
